#!/usr/bin/env pwsh
<#
.SYNOPSIS
    –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ GitHub Actions workflows

.DESCRIPTION
    –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ GitHub Actions workflows:
    - –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
    - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
    - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏
    - –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞

.PARAMETER Action
    –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:
    - build: –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∫–∏
    - quality: –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
    - version: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏
    - release: –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞

.PARAMETER VersionType
    –¢–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è action=version):
    - major: –ú–∞–∂–æ—Ä–Ω–∞—è –≤–µ—Ä—Å–∏—è
    - minor: –ú–∏–Ω–æ—Ä–Ω–∞—è –≤–µ—Ä—Å–∏—è
    - patch: –ü–∞—Ç—á –≤–µ—Ä—Å–∏—è

.PARAMETER CreateRelease
    –°–æ–∑–¥–∞—Ç—å –ª–∏ GitHub Release (—Ç–æ–ª—å–∫–æ –¥–ª—è action=version)

.PARAMETER Branch
    –í–µ—Ç–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ workflow (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: main)

.PARAMETER Token
    GitHub Personal Access Token (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è GITHUB_TOKEN)

.EXAMPLE
    .\trigger-github-actions.ps1 -Action build
    –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–±–æ—Ä–∫—É –ø—Ä–æ–µ–∫—Ç–∞

.EXAMPLE
    .\trigger-github-actions.ps1 -Action version -VersionType patch -CreateRelease
    –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–∞—Ç—á –≤–µ—Ä—Å–∏—é –∏ —Å–æ–∑–¥–∞–µ—Ç —Ä–µ–ª–∏–∑

.EXAMPLE
    .\trigger-github-actions.ps1 -Action quality -Branch develop
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞ –≤ –≤–µ—Ç–∫–µ develop
#>

param(
    [Parameter(Mandatory = $true)]
    [ValidateSet("build", "quality", "version", "release")]
    [string]$Action,
    
    [Parameter(Mandatory = $false)]
    [ValidateSet("major", "minor", "patch")]
    [string]$VersionType = "patch",
    
    [Parameter(Mandatory = $false)]
    [switch]$CreateRelease,
    
    [Parameter(Mandatory = $false)]
    [string]$Branch = "main",
    
    [Parameter(Mandatory = $false)]
    [string]$Token
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
$RepoOwner = "HypsyNZ"
$RepoName = "BinanceTrader.NET"
$WorkflowFiles = @{
    "build" = "build.yml"
    "quality" = "code-quality.yml"
    "version" = "version-update.yml"
    "release" = "build.yml"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è GitHub Token
function Get-GitHubToken {
    if ($Token) {
        return $Token
    }
    
    $envToken = $env:GITHUB_TOKEN
    if ($envToken) {
        return $envToken
    }
    
    Write-Error "GitHub Token –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä -Token –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è GITHUB_TOKEN"
    exit 1
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
function Get-CurrentRepository {
    try {
        $remoteUrl = git config --get remote.origin.url
        if ($remoteUrl -match "github\.com[:/]([^/]+)/([^/]+?)(?:\.git)?$") {
            $RepoOwner = $matches[1]
            $RepoName = $matches[2]
            Write-Host "–û–±–Ω–∞—Ä—É–∂–µ–Ω —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: $RepoOwner/$RepoName" -ForegroundColor Green
            return @{ Owner = $RepoOwner; Name = $RepoName }
        }
    }
    catch {
        Write-Warning "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏–∑ git config"
    }
    
    return @{ Owner = $RepoOwner; Name = $RepoName }
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ workflow
function Start-GitHubWorkflow {
    param(
        [string]$WorkflowFile,
        [hashtable]$Inputs = @{}
    )
    
    $token = Get-GitHubToken
    $repo = Get-CurrentRepository
    
    $headers = @{
        "Authorization" = "token $token"
        "Accept" = "application/vnd.github.v3+json"
        "User-Agent" = "BinanceTrader-Build-Script"
    }
    
    $body = @{
        ref = $Branch
    }
    
    if ($Inputs.Count -gt 0) {
        $body.inputs = $Inputs
    }
    
    $jsonBody = $body | ConvertTo-Json -Depth 10
    
    $url = "https://api.github.com/repos/$($repo.Owner)/$($repo.Name)/actions/workflows/$WorkflowFile/dispatches"
    
    Write-Host "–ó–∞–ø—É—Å–∫ workflow: $WorkflowFile" -ForegroundColor Yellow
    Write-Host "URL: $url" -ForegroundColor Gray
    Write-Host "Body: $jsonBody" -ForegroundColor Gray
    
    try {
        $response = Invoke-RestMethod -Uri $url -Method Post -Headers $headers -Body $jsonBody -ContentType "application/json"
        Write-Host "‚úÖ Workflow —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!" -ForegroundColor Green
        return $true
    }
    catch {
        Write-Error "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ workflow: $($_.Exception.Message)"
        if ($_.Exception.Response) {
            $reader = New-Object System.IO.StreamReader($_.Exception.Response.GetResponseStream())
            $responseBody = $reader.ReadToEnd()
            Write-Error "–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: $responseBody"
        }
        return $false
    }
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ workflow
function Get-WorkflowStatus {
    param(
        [string]$WorkflowFile
    )
    
    $token = Get-GitHubToken
    $repo = Get-CurrentRepository
    
    $headers = @{
        "Authorization" = "token $token"
        "Accept" = "application/vnd.github.v3+json"
    }
    
    $url = "https://api.github.com/repos/$($repo.Owner)/$($repo.Name)/actions/workflows/$WorkflowFile/runs?per_page=1"
    
    try {
        $response = Invoke-RestMethod -Uri $url -Method Get -Headers $headers
        if ($response.workflow_runs.Count -gt 0) {
            $run = $response.workflow_runs[0]
            return @{
                Status = $run.status
                Conclusion = $run.conclusion
                RunId = $run.id
                Url = $run.html_url
            }
        }
    }
    catch {
        Write-Warning "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å workflow: $($_.Exception.Message)"
    }
    
    return $null
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–≥–∞ –∏ —Ä–µ–ª–∏–∑–∞
function New-GitTagAndRelease {
    param(
        [string]$Version
    )
    
    Write-Host "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–≥–∞ v$Version..." -ForegroundColor Yellow
    
    try {
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–≥–∞
        git tag -a "v$Version" -m "Release version $Version"
        git push origin "v$Version"
        
        Write-Host "‚úÖ –¢–µ–≥ v$Version —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π" -ForegroundColor Green
        return $true
    }
    catch {
        Write-Error "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ–≥–∞: $($_.Exception.Message)"
        return $false
    }
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
Write-Host "üöÄ –ó–∞–ø—É—Å–∫ GitHub Actions –¥–ª—è Binance Trader" -ForegroundColor Cyan
Write-Host "–î–µ–π—Å—Ç–≤–∏–µ: $Action" -ForegroundColor White
Write-Host "–í–µ—Ç–∫–∞: $Branch" -ForegroundColor White

switch ($Action) {
    "build" {
        $success = Start-GitHubWorkflow -WorkflowFile $WorkflowFiles.build
        if ($success) {
            Write-Host "üìã –°—Å—ã–ª–∫–∞ –Ω–∞ workflow: https://github.com/$RepoOwner/$RepoName/actions" -ForegroundColor Blue
        }
    }
    
    "quality" {
        $success = Start-GitHubWorkflow -WorkflowFile $WorkflowFiles.quality
        if ($success) {
            Write-Host "üìã –°—Å—ã–ª–∫–∞ –Ω–∞ workflow: https://github.com/$RepoOwner/$RepoName/actions" -ForegroundColor Blue
        }
    }
    
    "version" {
        $inputs = @{
            version_type = $VersionType
            create_release = $CreateRelease.IsPresent
        }
        
        $success = Start-GitHubWorkflow -WorkflowFile $WorkflowFiles.version -Inputs $inputs
        if ($success) {
            Write-Host "üìã –°—Å—ã–ª–∫–∞ –Ω–∞ workflow: https://github.com/$RepoOwner/$RepoName/actions" -ForegroundColor Blue
        }
    }
    
    "release" {
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –∏–∑ csproj
        $csprojPath = "BinanceTrader\Binance Trader.csproj"
        if (Test-Path $csprojPath) {
            $content = Get-Content $csprojPath -Raw
            if ($content -match '<Version>([^<]+)</Version>') {
                $version = $matches[1]
                Write-Host "–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: $version" -ForegroundColor Yellow
                
                # –°–æ–∑–¥–∞–µ–º —Ç–µ–≥
                if (New-GitTagAndRelease -Version $version) {
                    Write-Host "‚úÖ –†–µ–ª–∏–∑ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ GitHub Actions" -ForegroundColor Green
                    Write-Host "üìã –°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–ª–∏–∑—ã: https://github.com/$RepoOwner/$RepoName/releases" -ForegroundColor Blue
                }
            }
            else {
                Write-Error "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–µ—Ä—Å–∏—é –∏–∑ csproj —Ñ–∞–π–ª–∞"
            }
        }
        else {
            Write-Error "–§–∞–π–ª –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: $csprojPath"
        }
    }
}

Write-Host "`nüéâ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!" -ForegroundColor Cyan 